// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.sub = sub;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var top = function (dict) {
      return dict.top;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var $minus = function (dictRing) {
      return sub(dictRing);
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                  
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };                
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $greater = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $82 = compare(dictOrd)(a1)(a2);
              if ($82 instanceof GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $greater$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $83 = compare(dictOrd)(a1)(a2);
              if ($83 instanceof LT) {
                  return false;
              };
              return true;
          };
      };
  }; 
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Ring"] = Ring;
  exports["Semiring"] = Semiring;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports[">="] = $greater$eq;
  exports[">"] = $greater;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["eq"] = eq;
  exports["-"] = $minus;
  exports["sub"] = sub;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["ap"] = ap;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["otherwise"] = otherwise;
  exports["eqInt"] = eqInt;
  exports["ordInt"] = ordInt;
  exports["boundedInt"] = boundedInt;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeQuerySelector = function (selector) {
    return function (src) {
      return function () {
        return src.querySelector(selector);
      };
    };
  };

  exports.unsafeSetTextContent = function (value) {
    return function (src) {
      return function () {
        src.textContent = value;
        return {};
      };
    };
  };
 
})(PS["Data.DOM.Simple.Unsafe.Element"] = PS["Data.DOM.Simple.Unsafe.Element"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.DOM.Simple.Unsafe.Element"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_DOM_Simple_Types = PS["Data.DOM.Simple.Types"];
  var Data_DOM_Simple_Unsafe_Utils = PS["Data.DOM.Simple.Unsafe.Utils"];
  exports["unsafeSetTextContent"] = $foreign.unsafeSetTextContent;
  exports["unsafeQuerySelector"] = $foreign.unsafeQuerySelector;;
 
})(PS["Data.DOM.Simple.Unsafe.Element"] = PS["Data.DOM.Simple.Unsafe.Element"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.DOM.Simple.Unsafe.Window

  exports.unsafeDocument = function (win) {
    return function () {
      return win.document;
    };
  };
 
})(PS["Data.DOM.Simple.Unsafe.Window"] = PS["Data.DOM.Simple.Unsafe.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.DOM.Simple.Unsafe.Window"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_DOM_Simple_Types = PS["Data.DOM.Simple.Types"];
  var Data_DOM_Simple_Document = PS["Data.DOM.Simple.Document"];
  exports["unsafeDocument"] = $foreign.unsafeDocument;;
 
})(PS["Data.DOM.Simple.Unsafe.Window"] = PS["Data.DOM.Simple.Unsafe.Window"] || {});
(function(exports) {
  /* global exports, window */
  "use strict";

  // module Data.DOM.Simple.Window

  exports.globalWindow = window;
 
})(PS["Data.DOM.Simple.Window"] = PS["Data.DOM.Simple.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.DOM.Simple.Window"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_DOM_Simple_Types = PS["Data.DOM.Simple.Types"];
  var Data_DOM_Simple_Unsafe_Window = PS["Data.DOM.Simple.Unsafe.Window"];
  var Data_DOM_Simple_Document = PS["Data.DOM.Simple.Document"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  exports["globalWindow"] = $foreign.globalWindow;;
 
})(PS["Data.DOM.Simple.Window"] = PS["Data.DOM.Simple.Window"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.nowImpl = function (ctor) {
    return function () {
      return ctor(new Date());
    };
  };
 
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Enum = function (__superclass_Prelude$dotBounded_0, cardinality, fromEnum, pred, succ, toEnum) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.pred = pred;
      this.succ = succ;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var pred = function (dict) {
      return dict.pred;
  };                               
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1);
          };
      };
  };                                                                                                                
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  exports["Enum"] = Enum;
  exports["defaultPred"] = defaultPred;
  exports["defaultSucc"] = defaultSucc;
  exports["toEnum"] = toEnum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["fromEnum"] = fromEnum;
  exports["cardinality"] = cardinality;;
 
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Date"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time = PS["Data.Time"];
  var Global = PS["Global"];
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var Sunday = (function () {
      function Sunday() {

      };
      Sunday.value = new Sunday();
      return Sunday;
  })();
  var Monday = (function () {
      function Monday() {

      };
      Monday.value = new Monday();
      return Monday;
  })();
  var Tuesday = (function () {
      function Tuesday() {

      };
      Tuesday.value = new Tuesday();
      return Tuesday;
  })();
  var Wednesday = (function () {
      function Wednesday() {

      };
      Wednesday.value = new Wednesday();
      return Wednesday;
  })();
  var Thursday = (function () {
      function Thursday() {

      };
      Thursday.value = new Thursday();
      return Thursday;
  })();
  var Friday = (function () {
      function Friday() {

      };
      Friday.value = new Friday();
      return Friday;
  })();
  var Saturday = (function () {
      function Saturday() {

      };
      Saturday.value = new Saturday();
      return Saturday;
  })();
  var DateTime = function (x) {
      return x;
  }; 
  var showDayOfWeek = new Prelude.Show(function (v) {
      if (v instanceof Sunday) {
          return "Sunday";
      };
      if (v instanceof Monday) {
          return "Monday";
      };
      if (v instanceof Tuesday) {
          return "Tuesday";
      };
      if (v instanceof Wednesday) {
          return "Wednesday";
      };
      if (v instanceof Thursday) {
          return "Thursday";
      };
      if (v instanceof Friday) {
          return "Friday";
      };
      if (v instanceof Saturday) {
          return "Saturday";
      };
      throw new Error("Failed pattern match at Data.Date line 249, column 1 - line 258, column 1: " + [ v.constructor.name ]);
  });
  var now = $foreign.nowImpl(DateTime);
  var monthToEnum = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var monthFromEnum = function (v) {
      if (v instanceof January) {
          return 0;
      };
      if (v instanceof February) {
          return 1;
      };
      if (v instanceof March) {
          return 2;
      };
      if (v instanceof April) {
          return 3;
      };
      if (v instanceof May) {
          return 4;
      };
      if (v instanceof June) {
          return 5;
      };
      if (v instanceof July) {
          return 6;
      };
      if (v instanceof August) {
          return 7;
      };
      if (v instanceof September) {
          return 8;
      };
      if (v instanceof October) {
          return 9;
      };
      if (v instanceof November) {
          return 10;
      };
      if (v instanceof December) {
          return 11;
      };
      throw new Error("Failed pattern match at Data.Date line 197, column 1 - line 198, column 1: " + [ v.constructor.name ]);
  };                                                                                    
  var dayOfWeekToEnum = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Sunday.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Monday.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Tuesday.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Wednesday.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(Thursday.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(Friday.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(Saturday.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var dayOfWeekFromEnum = function (v) {
      if (v instanceof Sunday) {
          return 0;
      };
      if (v instanceof Monday) {
          return 1;
      };
      if (v instanceof Tuesday) {
          return 2;
      };
      if (v instanceof Wednesday) {
          return 3;
      };
      if (v instanceof Thursday) {
          return 4;
      };
      if (v instanceof Friday) {
          return 5;
      };
      if (v instanceof Saturday) {
          return 6;
      };
      throw new Error("Failed pattern match at Data.Date line 275, column 1 - line 276, column 1: " + [ v.constructor.name ]);
  };
  var boundedMonth = new Prelude.Bounded(January.value, December.value);
  var enumMonth = new Data_Enum.Enum(function () {
      return boundedMonth;
  }, 12, monthFromEnum, Data_Enum.defaultPred(monthToEnum)(monthFromEnum), Data_Enum.defaultSucc(monthToEnum)(monthFromEnum), monthToEnum);
  var boundedDayOfWeek = new Prelude.Bounded(Sunday.value, Saturday.value);
  var enumDayOfWeek = new Data_Enum.Enum(function () {
      return boundedDayOfWeek;
  }, 7, dayOfWeekFromEnum, Data_Enum.defaultPred(dayOfWeekToEnum)(dayOfWeekFromEnum), Data_Enum.defaultSucc(dayOfWeekToEnum)(dayOfWeekFromEnum), dayOfWeekToEnum);
  exports["Sunday"] = Sunday;
  exports["Monday"] = Monday;
  exports["Tuesday"] = Tuesday;
  exports["Wednesday"] = Wednesday;
  exports["Thursday"] = Thursday;
  exports["Friday"] = Friday;
  exports["Saturday"] = Saturday;
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["now"] = now;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedDayOfWeek"] = boundedDayOfWeek;
  exports["showDayOfWeek"] = showDayOfWeek;
  exports["enumDayOfWeek"] = enumDayOfWeek;;
 
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $$Date = function (x) {
      return x;
  };
  var semiringDate = new Prelude.Semiring(function (v) {
      return function (v1) {
          return v + v1 | 0;
      };
  }, function (v) {
      return function (v1) {
          return v * v1 | 0;
      };
  }, 1, 0);
  var ringDate = new Prelude.Ring(function () {
      return semiringDate;
  }, function (v) {
      return function (v1) {
          return v - v1;
      };
  });
  var eqDate = new Prelude.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  var ordDate = new Prelude.Ord(function () {
      return eqDate;
  }, function (v) {
      return function (v1) {
          return Prelude.compare(Prelude.ordInt)(v)(v1);
      };
  });
  exports["Date"] = $$Date;
  exports["eqDate"] = eqDate;
  exports["ordDate"] = ordDate;
  exports["ringDate"] = ringDate;
  exports["semiringDate"] = semiringDate;;
 
})(PS["Data.Date.Fixed"] = PS["Data.Date.Fixed"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Date.Locale

  // jshint maxparams: 2
  exports.dateMethod = function (method, date) {
    return function () {
      return date[method]();
    };
  };
 
})(PS["Data.Date.Locale"] = PS["Data.Date.Locale"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Date.Locale"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Date = PS["Data.Date"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Time = PS["Data.Time"];
  var Prelude = PS["Prelude"];     
  var year = function (d) {
      return $foreign.dateMethod("getFullYear", d);
  };
  var toLocaleDateString = function (d) {
      return $foreign.dateMethod("toLocaleDateString", d);
  };
  var month = function (d) {
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(function ($0) {
          return Data_Maybe_Unsafe.fromJust(Data_Enum.toEnum(Data_Date.enumMonth)($0));
      })($foreign.dateMethod("getMonth", d));
  };
  var dayOfWeek = function (d) {
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(function ($1) {
          return Data_Maybe_Unsafe.fromJust(Data_Enum.toEnum(Data_Date.enumDayOfWeek)($1));
      })($foreign.dateMethod("getDay", d));
  };
  var dayOfMonth = function (d) {
      return $foreign.dateMethod("getDate", d);
  };
  exports["toLocaleDateString"] = toLocaleDateString;
  exports["dayOfWeek"] = dayOfWeek;
  exports["dayOfMonth"] = dayOfMonth;
  exports["month"] = month;
  exports["year"] = year;;
 
})(PS["Data.Date.Locale"] = PS["Data.Date.Locale"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.ceil = Math.ceil;

  exports.floor = Math.floor;

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };                         
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["%"] = $foreign["%"];
  exports["floor"] = $foreign.floor;
  exports["ceil"] = $foreign.ceil;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  var ceil = function ($3) {
      return unsafeClamp($$Math.ceil($3));
  };
  exports["floor"] = floor;
  exports["ceil"] = ceil;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Fixed = PS["Data.Date.Fixed"];
  var Data_Date_Locale = PS["Data.Date.Locale"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Int = PS["Data.Int"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];     
  var priorElapsedDays = function (year) {
      var p = Data_Int.toNumber(year - 1);
      return (((Data_Int.floor(p) * 365 | 0) + Data_Int.floor(p / 4.0) | 0) - Data_Int.floor(p / 100.0)) + Data_Int.floor(p / 400.0) | 0;
  };
  var isLeap = function (year) {
      var y = Data_Int.toNumber(year);
      return $$Math["%"](y)(4.0) === 0.0 && ($$Math["%"](y)(100.0) !== 0.0 || $$Math["%"](y)(400.0) === 0.0);
  };
  var deductLeapDays = function (year) {
      return function (days) {
          var $5 = isLeap(year);
          if ($5) {
              return days - 1;
          };
          if (!$5) {
              return days - 2;
          };
          throw new Error("Failed pattern match at Data.Date.Gregorian line 22, column 1 - line 23, column 1: " + [ $5.constructor.name ]);
      };
  };
  var ordinalDays = function (year) {
      return function (month) {
          return function (day) {
              var monthInt = Data_Enum.fromEnum(Data_Date.enumMonth)(month) + 1 | 0;
              var ordinal = Data_Int.floor(Data_Int.toNumber((367 * monthInt | 0) - 362) / 12.0) + day | 0;
              var $7 = monthInt > 2;
              if ($7) {
                  return deductLeapDays(year)(ordinal);
              };
              if (!$7) {
                  return ordinal;
              };
              throw new Error("Failed pattern match at Data.Date.Gregorian line 29, column 1 - line 30, column 1: " + [ $7.constructor.name ]);
          };
      };
  };
  var toFixed = function (date) {
      return function __do() {
          var v = Data_Date_Locale.year(date)();
          var v1 = Data_Date_Locale.month(date)();
          var v2 = Data_Date_Locale.dayOfMonth(date)();
          return Data_Date_Fixed["Date"](priorElapsedDays(v) + ordinalDays(v)(v1)(v2) | 0);
      };
  };
  exports["isLeap"] = isLeap;
  exports["toFixed"] = toFixed;
  exports["priorElapsedDays"] = priorElapsedDays;
  exports["ordinalDays"] = ordinalDays;
  exports["deductLeapDays"] = deductLeapDays;;
 
})(PS["Data.Date.Gregorian"] = PS["Data.Date.Gregorian"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Data_Date_Fixed = PS["Data.Date.Fixed"];
  var Data_Int = PS["Data.Int"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];     
  var Year = function (x) {
      return x;
  };
  var weekdayString = function (day) {
      var $11 = Data_Int.floor($$Math["%"](Data_Int.toNumber(day))(7.0));
      if ($11 === 0) {
          return "Sunday";
      };
      if ($11 === 1) {
          return "Monday";
      };
      if ($11 === 2) {
          return "Tuesday";
      };
      if ($11 === 3) {
          return "Wednesday";
      };
      if ($11 === 4) {
          return "Thursday";
      };
      if ($11 === 5) {
          return "Friday";
      };
      if ($11 === 6) {
          return "Saturday";
      };
      throw new Error("Failed pattern match at Data.Date.Symmetry454 line 68, column 1 - line 69, column 1: " + [ $11.constructor.name ]);
  };
  var toNewYearDay = function (year) {
      var p = year - 1;
      return Data_Date_Fixed["Date"]((1 + (364 * p | 0) | 0) + ((7 * ((52 * p | 0) + 146 | 0) | 0) / 293 | 0) | 0);
  };
  var showYear = new Prelude.Show(function (v) {
      return Prelude.show(Prelude.showInt)(v);
  });
  var semiringYear = new Prelude.Semiring(function (v) {
      return function (v1) {
          return v + v1 | 0;
      };
  }, function (v) {
      return function (v1) {
          return v * v1 | 0;
      };
  }, 1, 0);
  var ringYear = new Prelude.Ring(function () {
      return semiringYear;
  }, function (v) {
      return function (v1) {
          return v - v1;
      };
  });
  var estimateYear = function (date) {
      var fixedDayNumber = Data_Int.toNumber(date);
      return Year(Data_Int.ceil((fixedDayNumber - 1.0) / (365.0 + 71.0 / 293.0)));
  }; 
  var daysToMonth = function (dayOfYear) {
      var weekOfYear = Data_Int.ceil(Data_Int.toNumber(dayOfYear) / 7.0);
      var quarter = Data_Int.ceil((4.0 / 53.0) * Data_Int.toNumber(weekOfYear));
      var dayOfQuarter = dayOfYear - (91 * (quarter - 1) | 0);
      var weekOfQuarter = Data_Int.ceil(Data_Int.toNumber(dayOfQuarter) / 7.0);
      var monthOfQuarter = Data_Int.ceil((2.0 / 9.0) * Data_Int.toNumber(weekOfQuarter));
      return ((3 * quarter | 0) + monthOfQuarter | 0) - 3;
  };
  var dayOfMonth = function (dayOfYear) {
      return function (month) {
          var daysBefore = ((28 * month | 0) + ((7 * month | 0) / 3 | 0) | 0) - 28;
          return dayOfYear - daysBefore;
      };
  };
  var checkForLeapWeek = function (date) {
      return function (newYearDay) {
          var nextYear = Prelude["+"](semiringYear)(estimateYear(date))(1);
          var delta = (function () {
              var $26 = Prelude["-"](Data_Date_Fixed.ringDate)(date)(newYearDay);
              return $26;
          })();
          var $27 = delta >= 364 && Prelude[">="](Data_Date_Fixed.ordDate)(date)(toNewYearDay(nextYear));
          if ($27) {
              return nextYear;
          };
          if (!$27) {
              return estimateYear(date);
          };
          throw new Error("Failed pattern match at Data.Date.Symmetry454 line 36, column 1 - line 37, column 1: " + [ $27.constructor.name ]);
      };
  };
  var toYear = function (date) {
      return function (newYearDay) {
          if (Prelude["<"](Data_Date_Fixed.ordDate)(date)(newYearDay)) {
              return Prelude["-"](ringYear)(estimateYear(date))(1);
          };
          if (Prelude[">"](Data_Date_Fixed.ordDate)(date)(newYearDay)) {
              return checkForLeapWeek(date)(newYearDay);
          };
          if (Prelude.otherwise) {
              return estimateYear(date);
          };
          throw new Error("Failed pattern match at Data.Date.Symmetry454 line 83, column 1 - line 84, column 1: " + [ date.constructor.name, newYearDay.constructor.name ]);
      };
  };
  var toString = function (date) {
      var year = toYear(date)(toNewYearDay(estimateYear(date)));
      var dayOfYear = (function () {
          var $30 = Prelude["-"](Data_Date_Fixed.ringDate)(date)(toNewYearDay(year));
          return $30 + 1 | 0;
      })();
      var month = daysToMonth(dayOfYear);
      var day = dayOfMonth(dayOfYear)(month);
      var weekday = weekdayString(day);
      return weekday + (", " + (Prelude.show(Prelude.showInt)(month) + ("/" + (Prelude.show(Prelude.showInt)(day) + ("/" + Prelude.show(showYear)(year))))));
  };
  exports["Year"] = Year;
  exports["toNewYearDay"] = toNewYearDay;
  exports["dayOfMonth"] = dayOfMonth;
  exports["daysToMonth"] = daysToMonth;
  exports["toYear"] = toYear;
  exports["toString"] = toString;
  exports["estimateYear"] = estimateYear;
  exports["checkForLeapWeek"] = checkForLeapWeek;
  exports["ringYear"] = ringYear;
  exports["semiringYear"] = semiringYear;
  exports["showYear"] = showYear;;
 
})(PS["Data.Date.Symmetry454"] = PS["Data.Date.Symmetry454"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Gregorian = PS["Data.Date.Gregorian"];
  var Data_Date_Locale = PS["Data.Date.Locale"];
  var Data_Date_Symmetry454 = PS["Data.Date.Symmetry454"];
  var Data_DOM_Simple_Unsafe_Element = PS["Data.DOM.Simple.Unsafe.Element"];
  var Data_DOM_Simple_Unsafe_Window = PS["Data.DOM.Simple.Unsafe.Window"];
  var Data_DOM_Simple_Window = PS["Data.DOM.Simple.Window"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];     
  var querySelector = function (query) {
      return Prelude[">>="](Control_Monad_Eff.bindEff)(Data_DOM_Simple_Unsafe_Window.unsafeDocument(Data_DOM_Simple_Window.globalWindow))(Data_DOM_Simple_Unsafe_Element.unsafeQuerySelector(query));
  };
  var main = function __do() {
      var v = Prelude[">>="](Control_Monad_Eff.bindEff)(Data_Date.now)(Data_Date_Locale.toLocaleDateString)();
      var v1 = Prelude[">>="](Control_Monad_Eff.bindEff)(Data_Date.now)(Data_Date_Locale.dayOfWeek)();
      var v2 = Prelude[">>="](Control_Monad_Eff.bindEff)(Data_Date.now)(Data_Date_Gregorian.toFixed)();
      var output = Prelude.show(Data_Date.showDayOfWeek)(v1) + (", " + v);
      Prelude[">>="](Control_Monad_Eff.bindEff)(querySelector("#gregorian"))(Data_DOM_Simple_Unsafe_Element.unsafeSetTextContent(output))();
      return Prelude[">>="](Control_Monad_Eff.bindEff)(querySelector("#symmetry454"))(Data_DOM_Simple_Unsafe_Element.unsafeSetTextContent(Data_Date_Symmetry454.toString(v2)))();
  };
  exports["querySelector"] = querySelector;
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
